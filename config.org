#+TITLE: Emacs configuration 
#+AUTHOR: Sean O'Reilly 

* Custom settings 

Sets up customisations in a file separate from init.el

#+BEGIN_SRC emacs-lisp

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  (global-auto-revert-mode t)
  (global-hl-line-mode)


  (setq backup-directory-alist
    `((".*" . , "~/.emacs_saves/")))

  (setq auto-save-file-name-transforms
    `((".*" "~/.emacs_saves/" t)))
#+END_SRC

* macOS

Sometimes Mac OS doesn't play nice with emacs. Here are some overrides that I've needed to use.


** Environment paths 
#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
    :ensure t 
    :init
    (exec-path-from-shell-initialize))

#+END_SRC
* GPG

#+BEGIN_SRC emacs-lisp

(require 'epa-file)
(epa-file-enable)
(setq epa-pinentry-mode 'loopback)
; This will force Emacs to use its own internal password prompt instead of an external pin entry program.
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC
* Theme and UI
** Mouse scroll

For smoother mouse scrolling, one line at a time (less "jumpy" than defaults).

#+BEGIN_SRC emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC
** Font

Set font size to 14.
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil :height 140)

#+END_SRC
* Magit 

Git porcelain within emacs 
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (global-set-key (kbd "C-x g") 'magit-status))

#+END_SRC
* Orgmode 
#+BEGIN_SRC emacs-lisp
  
(setq org-directory "~/Dropbox/org")

#+END_SRC

** Key bindings 

#+BEGIN_SRC emacs-lisp 

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

#+END_SRC

** Agenda files 

#+BEGIN_SRC emacs-lisp

  (setq org-agenda-files (list(concat org-directory "/todos.org")))

  (setq org-log-done t)                             

  (setq org-todo-keywords
	  '((sequence "TODO(t)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c)")))
#+END_SRC

** Spelling in orgmode 

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'turn-on-flyspell)

#+END_SRC

** Export back-ends

#+BEGIN_SRC emacs-lisp

(eval-after-load "org"
  '(require 'ox-md nil t))

#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/todos.org"))
  (define-key global-map "\C-cc" 'org-capture)


  (setq org-capture-templates '((
       "t"                ; key
       "Todo"             ; description
       entry              ; type
       (file+headline org-default-notes-file "Tasks")       ; target
       "* TODO [#B] %^{Todo} %(org-set-tags) \n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"  ; template
       :prepend t        ; properties
       :empty-lines 1    ; properties
       :created t        ; properties
       )))
#+END_SRC

* IDO 

#+BEGIN_SRC emacs-lisp

  (use-package ido
               :ensure t
               :init
               (ido-mode 1))
               ;; fuzzy search


  (use-package flx-ido
       :ensure t 
       :init 
       (ido-everywhere 1)
       (flx-ido-mode 1)

       ;; disable ido faces to see flx highlights.
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil)


       ;; Display ido results vertically, rather than horizontally
       (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
       (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
       (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
       (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
         (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
         (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
       (add-hook 'ido-setup-hook 'ido-define-keys))

#+END_SRC

* Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
               :ensure t
               :init 
               (add-hook 'after-init-hook 'global-company-mode)
               (setq company-dabbrev-downcase 0)
               (setq company-idle-delay 0))

#+END_SRC

* Web mode

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :init 
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))

#+END_SRC

* Javascript 

#+BEGIN_SRC emacs-lisp

  (use-package js2-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

#+END_SRC
* Graphviz

For Graphviz diagrams and plantUML
#+BEGIN_SRC emacs-lisp

  (use-package graphviz-dot-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode)))

#+END_SRC
* File and directory navigation

** Fiplr

Provides fuzzy search capability 
#+BEGIN_SRC emacs-lisp

  (use-package fiplr
    :ensure t
    :init
    (global-set-key (kbd "s-r") 'fiplr-find-file))

#+END_SRC

* Ruby on Rails development 


** RVM

rvm.el will change Emacs to use the right ruby version for the file in the current buffer. Remember that the new ruby version will be used for the whole Emacs session and not just the current file. 

#+BEGIN_SRC emacs-lisp

  (use-package rvm
    :ensure t
    :init
    (rvm-use-default))

#+END_SRC
** Robe 

#+BEGIN_SRC emacs-lisp

  (use-package robe
    :ensure t
    :init
    (add-hook 'ruby-mode-hook 'robe-mode))

#+END_SRC

** Projectile 

#+BEGIN_SRC emacs-lisp

  (use-package projectile-rails
    :ensure t
    :init
    (projectile-rails-global-mode))

#+END_SRC
* LISP
#+BEGIN_SRC emacs-lisp

   ;; Set your lisp system and, optionally, some contribs
   ;; (setq inferior-lisp-program "/usr/local/bin/sbcl")
   ;; (setq slime-contribs '(slime-fancy))

#+END_SRC
* Octave

Associate matlab files with octave mode.
#+BEGIN_SRC emacs-lisp
  (use-package octave
    :ensure t
    :init 
    (autoload 'octave-mode "octave-mod" nil t)
    (setq auto-mode-alist
          (cons '("\\.m$" . octave-mode) auto-mode-alist)))

#+END_SRC
* Expand region 
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
* AVY 

Jump to things in emacs. Check out avy copy region. 
#+BEGIN_SRC emacs-lisp

  (use-package avy
    :ensure t
    :init
    (global-set-key (kbd "C-:") 'avy-goto-char))

#+END_SRC
* RSS Feed - Elfeed

Check out Elfeed org to organise feeds using an org file 

#+BEGIN_SRC emacs-lisp 
    (use-package elfeed
      :ensure t
      :init
      (global-set-key (kbd "C-x w") 'elfeed))

  (use-package elfeed-org
    :ensure t
    :init
    (setq rmh-elfeed-org-files (list (concat org-directory "/elfeed.org"))))
    
#+END_SRC








