#+TITLE: Emacs configuration 
#+AUTHOR: Sean O'Reilly 

* Custom settings 

Sets up customisations in a file separate from init.el

#+BEGIN_SRC emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

(global-auto-revert-mode t)
#+END_SRC

* Startup files

These files will get loaded into a buffer at startup
#+BEGIN_SRC emacs-lisp

;; (find-file "~/Dropbox/notes.org") 

#+END_SRC

* macOS

Sometimes Mac OS doesn't play nice with emacs. Here are some overrides that I've needed to use.


** Environment paths 
#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
    :ensure t 
    :init
    (exec-path-from-shell-initialize))

#+END_SRC
* Theme and UI
** Mouse scroll

For smoother mouse scrolling, one line at a time (less "jumpy" than defaults).

#+BEGIN_SRC emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC
** Font

Set font size to 14.
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil :height 140)

#+END_SRC
** Monokai 

#+BEGIN_SRC emacs-lisp

(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))

#+END_SRC

* Magit 

Git porcelain within emacs 
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (global-set-key (kbd "C-x g") 'magit-status))

#+END_SRC
* Orgmode 

** Key bindings 

#+BEGIN_SRC emacs-lisp 

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

#+END_SRC

** Agenda files 

#+BEGIN_SRC 

(setq org-agenda-files (list "~/Dropbox/todo.org"))

(setq org-log-done t)                             

(setq org-todo-keywords
        '((sequence "TODO(t)" "WAITING(w/!)" "|" "DONE(d!)" "CANCELLED(c)")))
#+END_SRC

** Spelling in orgmode 

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'turn-on-flyspell)

#+END_SRC

* IDO 

#+BEGIN_SRC emacs-lisp

  (use-package ido
               :ensure t
               :init
               (ido-mode 1))
               ;; fuzzy search


  (use-package flx-ido
       :ensure t 
       :init 
       (ido-everywhere 1)
       (flx-ido-mode 1)

       ;; disable ido faces to see flx highlights.
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil)


       ;; Display ido results vertically, rather than horizontally
       (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
       (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
       (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
       (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
         (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
         (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
       (add-hook 'ido-setup-hook 'ido-define-keys))

#+END_SRC

* Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
               :ensure t
               :init 
               (add-hook 'after-init-hook 'global-company-mode)
               (setq company-dabbrev-downcase 0)
               (setq company-idle-delay 0))

#+END_SRC
* Web mode

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :init 
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))

#+END_SRC

* File and directory navigation

** Fiplr

Provides fuzzy search capability 
#+BEGIN_SRC emacs-lisp

  (use-package fiplr
    :ensure t
    :init
    (global-set-key (kbd "s-r") 'fiplr-find-file))

#+END_SRC

* Ruby on Rails development 


** RVM

rvm.el will change Emacs to use the right ruby version for the file in the current buffer. Remember that the new ruby version will be used for the whole Emacs session and not just the current file. 

#+BEGIN_SRC emacs-lisp

  (use-package rvm
    :ensure t
    :init
    (rvm-use-default))

#+END_SRC
** Robe 

#+BEGIN_SRC emacs-lisp

  (use-package robe
    :ensure t
    :init
    (add-hook 'ruby-mode-hook 'robe-mode))

#+END_SRC

** Projectile 

#+BEGIN_SRC emacs-lisp

  (use-package projectile-rails
    :ensure t
    :init
    (projectile-rails-global-mode))

#+END_SRC
* LISP
#+BEGIN_SRC emacs-lisp

   ;; Set your lisp system and, optionally, some contribs
   ;; (setq inferior-lisp-program "/usr/local/bin/sbcl")
   ;; (setq slime-contribs '(slime-fancy))

#+END_SRC
* Unsorted 
#+BEGIN_SRC emacs-lisp

#+END_SRC
