#+TITLE: Emacs configuration
#+AUTHOR: Sean O'Reilly
* Loading my configuration file
I'm constantly loading, editing and reloading my config.org file. Thanks Uncle Dave for these functions.
** Open configuration file
#+BEGIN_SRC emacs-lisp
(defun config-visit ()
  (interactive)
  (find-file "~/.emacs.d/config.org"))
(global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload configuration file
#+BEGIN_SRC emacs-lisp
(defun config-reload ()
  "Reloads ~/.emacs.d/config.org at runtime"
  (interactive)
  (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
(global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Custom settings

Sets up customisations in a file separate from init.el

#+BEGIN_SRC emacs-lisp

  (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
  (load custom-file)

  (global-auto-revert-mode t)
  (global-hl-line-mode)

  (setq show-paren-delay 0)
  (show-paren-mode 1)

  (setq backup-directory-alist
        `((".*" . , "~/.emacs_saves/")))

  (setq auto-save-file-name-transforms
        `((".*" "~/.emacs_saves/" t)))
#+END_SRC

* macOS

Sometimes Mac OS doesn't play nice with emacs. Here are some overrides that I've needed to use.


** Environment paths
#+BEGIN_SRC emacs-lisp

  (use-package exec-path-from-shell
    :ensure t
    :init
    (exec-path-from-shell-initialize))

#+END_SRC
* GPG

#+BEGIN_SRC emacs-lisp

(require 'epa-file)
(epa-file-enable)
(setq epa-pinentry-mode 'loopback)
; This will force Emacs to use its own internal password prompt instead of an external pin entry program.
(setenv "GPG_AGENT_INFO" nil)
#+END_SRC
* Theme and UI
** Mouse scroll

For smoother mouse scrolling, one line at a time (less "jumpy" than defaults).

#+BEGIN_SRC emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC
** Font

Set font size to 14.
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil :height 140)

#+END_SRC
* Magit

Git porcelain within emacs
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (global-set-key (kbd "C-x g") 'magit-status))

#+END_SRC
* Orgmode

I normally symlink this directory

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC

** Key bindings

#+BEGIN_SRC emacs-lisp

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

#+END_SRC

** Agenda files

#+BEGIN_SRC emacs-lisp

  (setq org-agenda-files (list(concat org-directory "/todos.org")))

  (setq org-log-done t)

  (setq org-todo-keywords
	  '((sequence "TODO(t)" "WAITING(w!)" "|" "DONE(d!)" "CANCELLED(c)")))
#+END_SRC

** Spelling in orgmode

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'turn-on-flyspell)

#+END_SRC

** Export back-ends

#+BEGIN_SRC emacs-lisp

(eval-after-load "org"
  '(require 'ox-md nil t))

#+END_SRC

** Capture

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory "/todos.org"))
  (define-key global-map "\C-cc" 'org-capture)


  (setq org-capture-templates '((
       "t"                ; key
       "Todo"             ; description
       entry              ; type
       (file+headline org-default-notes-file "Tasks")       ; target
       "* TODO [#B] %^{Todo} %(org-set-tags) \n:PROPERTIES:\n:Created: %U\n:END:\n\n%?"  ; template
       :prepend t        ; properties
       :empty-lines 1    ; properties
       :created t        ; properties
       )))
#+END_SRC

* IDO

#+BEGIN_SRC emacs-lisp

  (use-package ido
               :ensure t
               :init
               (ido-mode 1))
               ;; fuzzy search


  (use-package flx-ido
       :ensure t
       :init
       (ido-everywhere 1)
       (flx-ido-mode 1)

       ;; disable ido faces to see flx highlights.
       (setq ido-enable-flex-matching t)
       (setq ido-use-faces nil)


       ;; Display ido results vertically, rather than horizontally
       (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
       (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
       (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
       (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
         (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
         (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
       (add-hook 'ido-setup-hook 'ido-define-keys))

#+END_SRC

* Company mode

#+BEGIN_SRC emacs-lisp
  (use-package company
               :ensure t
               :init
               (add-hook 'after-init-hook 'global-company-mode)
               (setq company-dabbrev-downcase 0)
               (setq company-idle-delay 0))

#+END_SRC

* Web mode

#+BEGIN_SRC emacs-lisp

  (use-package web-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode)))

#+END_SRC

* Javascript

#+BEGIN_SRC emacs-lisp

  (use-package js2-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode)))

#+END_SRC
* Graphviz

For Graphviz diagrams and plantUML
#+BEGIN_SRC emacs-lisp

  (use-package graphviz-dot-mode
    :ensure t
    :init
    (add-to-list 'auto-mode-alist '("\\.dot\\'" . graphviz-dot-mode)))

#+END_SRC
* File and directory navigation

** Fiplr

Provides fuzzy search capability
#+BEGIN_SRC emacs-lisp

  (use-package fiplr
    :ensure t
    :init
    (global-set-key (kbd "s-r") 'fiplr-find-file))

#+END_SRC


* Trailing whitespace

Remove trailing whitespace with each save
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

* Ruby on Rails development


#+BEGIN_SRC emacs-lisp

(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))

#+END_SRC

** Rubocop

 #+BEGIN_SRC emacs-lisp

;(add-hook 'ruby-mode-hook #'rubocop-mode)

 #+END_SRC

** RVM

rvm.el will change Emacs to use the right ruby version for the file in the current buffer. Remember that the new ruby version will be used for the whole Emacs session and not just the current file.

#+BEGIN_SRC emacs-lisp

  (use-package rvm
    :ensure t
    :init
    (rvm-use-default))

#+END_SRC
** Robe

#+BEGIN_SRC emacs-lisp

  (use-package robe
    :ensure t
    :init
    (add-hook 'ruby-mode-hook 'robe-mode))

#+END_SRC

** Projectile

#+BEGIN_SRC emacs-lisp
  (setq projectile-known-projects-file "~/projectile-bookmarks.eld")
  (use-package projectile
    :ensure t
    :config
    (projectile-global-mode)
    )

  (use-package projectile-rails
    :ensure t
    :init
    (projectile-rails-global-mode))

#+END_SRC
* LISP
#+BEGIN_SRC emacs-lisp

(setq inferior-lisp-program "sbcl")
(setq slime-contribs '(slime-fancy))
(load (expand-file-name "~/quicklisp/slime-helper.el"))


#+END_SRC
* Octave

Associate matlab files with octave mode.
#+BEGIN_SRC emacs-lisp
  (use-package octave
    :ensure t
    :init
    (autoload 'octave-mode "octave-mod" nil t)
    (setq auto-mode-alist
          (cons '("\\.m$" . octave-mode) auto-mode-alist)))

#+END_SRC
* Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :init
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
* AVY

Jump to things in emacs. Check out avy copy region.
#+BEGIN_SRC emacs-lisp

  (use-package avy
    :ensure t
    )

#+END_SRC
* RSS Feed - Elfeed

Check out Elfeed org to organise feeds using an org file

#+BEGIN_SRC emacs-lisp
    (use-package elfeed
      :ensure t
      :init
      (global-set-key (kbd "C-x w") 'elfeed))

  ;; (use-package elfeed-org
  ;;   :ensure t
  ;;   :init
  ;;   (setq rmh-elfeed-org-files (list (concat org-directory "/elfeed.org"))))

#+END_SRC

* Helm

#+BEGIN_SRC emacs-lisp

  (use-package helm-projectile
    :ensure t)

#+END_SRC
* Ag

#+BEGIN_SRC emacs-lisp

  (use-package ag
    :ensure t)

#+END_SRC
* Smart Parens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (require 'smartparens-config)
    (add-hook 'prog-mode-hook 'smartparens-mode))

  (smartparens-strict-mode t)
#+END_SRC
* PlantUML

#+BEGIN_SRC emacs-lisp

  (use-package plantuml-mode
    :ensure t)

;; Enable plantuml-mode for PlantUML files
(add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode))

#+END_SRC
* Dired Jump

#+BEGIN_SRC emacs-lisp
;; enable dired jump with C-x C-j
(require 'dired-x)

#+END_SRC

* Dumb jump
Jump to definition package

#+BEGIN_SRC emacs-lisp

(use-package dumb-jump
  :bind (("M-g o" . dumb-jump-go-other-window)
         ("M-g j" . dumb-jump-go)
         ("M-g i" . dumb-jump-go-prompt)
         ("M-g x" . dumb-jump-go-prefer-external)
         ("M-g z" . dumb-jump-go-prefer-external-other-window))
  :config (setq dumb-jump-selector 'ivy) ;; (setq dumb-jump-selector 'helm)
  :ensure)

#+END_SRC

* Rainbow identifiers

#+BEGIN_SRC emacs-lisp

  (use-package rainbow-identifiers
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'rainbow-identifiers-mode))

#+END_SRC


* Rainbow parens

#+BEGIN_SRC emacs-lisp

  ;; (use-package rainbow-delimeters
  ;;   :ensure t
  ;;   :config
  ;;   (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

#+END_SRC
* Org clip-link
Copies the URL and title of a weblink for org files
#+BEGIN_SRC emacs-lisp
  (use-package org-cliplink
    :ensure t)

  (global-set-key (kbd "C-x p i") 'org-cliplink)
#+END_SRC

* CRUX
A Collection of Ridiculously Useful eXtensions for Emacs. crux bundles a few useful interactive commands to enhance your overall Emacs experience.

#+BEGIN_SRC emacs-lisp

  (use-package crux
    :ensure t)

#+END_SRC
* Key chord mode

#+BEGIN_SRC emacs-lisp

    ;; shamelessly stolen from Prelude package

    (use-package key-chord
      :ensure t
      :init
      (key-chord-mode 1))


    (key-chord-define-global "jj" 'avy-goto-word-1)
    (key-chord-define-global "jl" 'avy-goto-line)
    (key-chord-define-global "jk" 'avy-goto-char)
    (key-chord-define-global "JJ" 'crux-switch-to-previous-buffer)
    ;; (key-chord-define-global "uu" 'undo-tree-visualize)
    ;; (key-chord-define-global "xx" 'execute-extended-command)
    ;; (key-chord-define-global "yy" 'browse-kill-ring)

    (defvar key-chord-tips '("Press <jj> quickly to jump to the beginning of a visible word."
                             "Press <jl> quickly to jump to a visible line."
                             "Press <jk> quickly to jump to a visible character."
                             "Press <JJ> quickly to switch to previous buffer."
                             "Press <uu> quickly to visualize the undo tree."
                             "Press <xx> quickly to execute extended command."
                             "Press <yy> quickly to browse the kill ring."))


#+END_SRC
* Dashboard

#+BEGIN_SRC emacs-lisp

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
  (setq dashboard-items '((recents  . 5)
                          (bookmarks . 5)
                          (projects . 5)
                          (agenda . 5)
                          (registers . 5)))
#+END_SRC
* CIDER

#+BEGIN_SRC emacs-lisp

  (use-package cider
    :ensure t)

#+END_SRC
* Terminal and bash
Jump quickly to a terminal. I'm using zsh right now.

#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)


  (global-set-key (kbd "<s-return>") 'ansi-term)

#+END_SRC
* Swiper

Replacement for default search

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
  (setq ivy-display-style 'fancy)
#+END_SRC
* Guru mode
#+BEGIN_SRC emacs-lisp
  (use-package guru-mode
    :ensure t
    :config
    (add-hook 'prog-mode-hook 'guru-mode))

#+END_SRC
* PDF Tools

[[https://github.com/politza/pdf-tools][Compilation instructions]]

#+BEGIN_SRC emacs-lisp
  (use-package pdf-tools
     :pin manual ;; manually update
     :config
     ;; initialise
     (pdf-tools-install)
     ;; open pdfs scaled to fit page
     (setq-default pdf-view-display-size 'fit-page)
     ;; automatically annotate highlights
     (setq pdf-annot-activate-created-annotations t)
     ;; use normal isearch
     (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward))
  ;; open pdf file links using pds tools
  (add-to-list 'org-file-apps '("\\.pdf\\'" . (lambda (file link) (org-pdfview-open link))))
#+END_SRC
