#+TITLE: Emacs configuration 
#+AUTHOR: Sean O'Reilly 

* Custom settings 

Sets up customisations in a file separate from init.el

#+BEGIN_SRC emacs-lisp

(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file)

(global-auto-revert-mode t)
#+END_SRC

* Startup files

These files will get loaded into a buffer at startup
#+BEGIN_SRC emacs-lisp

(find-file "~/Dropbox/notes.org") 

#+END_SRC

* macOS

Sometimes Mac OS doesn't play nice with emacs. Here are some overrides that I've needed to use.


** Environment paths 
#+BEGIN_SRC 

(exec-path-from-shell-initialize)

#+END_SRC
* Theme and UI
** Mouse scroll

For smoother mouse scrolling, one line at a time (less "jumpy" than defaults).

#+BEGIN_SRC emacs-lisp

  (setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
  (setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
  (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
  (setq scroll-step 1) ;; keyboard scroll one line at a time

#+END_SRC
** Font

Set font size to 14.
#+BEGIN_SRC emacs-lisp

(set-face-attribute 'default nil :height 140)

#+END_SRC
** Monokai 

#+BEGIN_SRC 

(use-package monokai-theme
  :if (window-system)
  :ensure t
  :init
  (setq monokai-use-variable-pitch nil))

#+END_SRC

* Magit 

Git porcelain within emacs 
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :init
  (global-set-key (kbd "C-x g") 'magit-status)

#+END_SRC
* Orgmode 

** Key bindings 

#+BEGIN_SRC emacs-lisp 

(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)

#+END_SRC

** Agenda files 

#+BEGIN_SRC 

(setq org-agenda-files (list "~/Dropbox/todo.org"))

(setq org-log-done t)                             

(setq org-todo-keywords
        '((sequence "TODO(t)" "WAITING(w/!)" "|" "DONE(d!)" "CANCELLED(c)")))
#+END_SRC

** Spelling in orgmode 

#+BEGIN_SRC emacs-lisp

(add-hook 'org-mode-hook 'turn-on-flyspell)

#+END_SRC

* File and directory navigation

** Fiplr

Provides fuzzy search capability 
#+BEGIN_SRC emacs-lips


#+END_SRC

* Ruby on Rails development 


** RVM

** Robe 

** Projectile 

#+BEGIN_SRC 

#+END_SRC
* Unsorted 
#+BEGIN_SRC emacs-lisp



  ;; company mode 
  (add-hook 'after-init-hook 'global-company-mode)
  (setq company-dabbrev-downcase 0)
  (setq company-idle-delay 0)

  (require 'rvm)
  (rvm-use-default) ;; use rvm's default ruby for the current Emacs session

  (projectile-rails-global-mode)

  (define-key projectile-rails-mode-map (kbd "s-r")   'fiplr-find-file)
  ;;


  (add-to-list 'load-path
                "~/.emacs.d/elpa/yasnippet-20170212.832")
  (require 'yasnippet)
  (yas-global-mode 1)



  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(custom-safe-themes
     (quote
      ("c7a9a68bd07e38620a5508fef62ec079d274475c8f92d75ed0c33c45fbe306bc" default)))
   '(package-selected-packages
     (quote
      (rtags restclient web-mode hl-line+ expand-region yaml-mode yasnippet company fiplr  monokai-theme ox-twbs rvm evil magit slime color-theme ## robe flx-ido flymake-ruby projectile-rails exec-path-from-shell))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )

  (require 'flymake-ruby)
  (add-hook 'ruby-mode-hook 'flymake-ruby-load)

  ;; Display ido results vertically,Xrather than horizontally
    (setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
    (defun ido-disable-line-truncation () (set (make-local-variable 'truncate-lines) nil))
    (add-hook 'ido-minibuffer-setup-hook 'ido-disable-line-truncation)
    (defun ido-define-keys () ;; C-n/p is more intuitive in vertical layout
      (define-key ido-completion-map (kbd "C-n") 'ido-next-match)
      (define-key ido-completion-map (kbd "C-p") 'ido-prev-match))
    (add-hook 'ido-setup-hook 'ido-define-keys)

  ;; jumping between files
  (require 'robe)
  (add-hook 'ruby-mode-hook 'robe-mode)




   ;; Set your lisp system and, optionally, some contribs
   (setq inferior-lisp-program "/usr/local/bin/sbcl")
  (setq slime-contribs '(slime-fancy))

  (require 'expand-region)
  (global-set-key (kbd "C-=") 'er/expand-region)
  (global-hl-line-mode +1)

  (require 'ido)
  (ido-mode t)

#+END_SRC
